/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2016, All rights reserved
*         DTU Physics, Kgs. Lyngby, Denmark
*
* Component: MCPL_input
*
* %I
* Written by: Erik N Knudsen 
* Date: Mar 2016
* Version: $Revision$
* Origin: DTU Physics
* Release: McStas 2.3
*
* Source-like component that reads neutron state parameters from an mcpl-file.
* %D
* Source-like component that reads neutron state parameters from a binary mcpl-file.
*
* MCPL is short for Monte Carlo Particle List, and is a new format for sharing events
* between e.g. MCNP(X), Geant4 and McStas.
*
* When used with MPI, the --ncount given on the commandline is overwritten by 
* #MPI nodes x #events in the file.
*
* %BUGS
*
* %P
* INPUT PARAMETERS
*
* filename: [str] Name of neutron mcpl file to read.
* verbose:  [ ]   Print debugging information for first 10 particles read. 
*
* %E
*******************************************************************************/

DEFINE COMPONENT MCPL_input
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string filename=0, polarisationuse=1,verbose=1)
OUTPUT PARAMETERS (inputfile,nparticles,read_neutrons)
DEPENDENCY "-I@MCCODE_LIB@/libs/mcpl -L@MCCODE_LIB@/libs/mcpl -lmcpl"

SHARE
%{
#include <mcpl.h>
%}

DECLARE
%{
    mcpl_file_t inputfile;
    long long nparticles;
    long long read_neutrons;
%}

INITIALIZE
%{
    char line[256];
    long long ncount;
    inputfile = mcpl_open_file(filename);
    
    nparticles=mcpl_hdr_nparticles(inputfile);
    ncount=mcget_ncount();
    if (ncount<nparticles){
        fprintf(stderr,"Warning (%s): You have requested %ld neutrons from a file which contains %ld.\n"
                "This will probably lead to biased data.\n",NAME_CURRENT_COMP,ncount,nparticles);
    }

#if defined (USE_MPI)
    mcset_ncount(mpi_node_count*nparticles);
    MPI_MASTER(fprintf(stdout, "\n\n Warning: You are using MCPL_input with MPI, hence your ncount is now redefined to:\n   %ld events at each of the %i MPI nodes = %ld events\n\n",nparticles,mpi_node_count,mpi_node_count*nparticles); );
#endif

    printf("MCPL file (%s) produced with %s.\n",filename,mcpl_hdr_srcname(inputfile));
    printf("MCPL file (%s) contains %ld particles.\n",filename,nparticles); 

    read_neutrons=0;
    
 #if defined (USE_MPI)   
    MPI_MASTER(
#endif

      if (verbose==1) {
        printf("MCPL_input verbose mode - outputting data on the 10 first read neutrons in MCPL units:\n");
      }

#if defined (USE_MPI) 
    );
#endif


%}

TRACE
%{
    double nrm;
    const mcpl_particle_t *particle;// = (mcpl_particle_t *) calloc(sizeof(mcpl_particle_t),1);
    particle = mcpl_read(inputfile);
    if (particle->pdgcode!=2112){
        /*read particle is not a neutron - get next one instead*/
        particle = mcpl_read(inputfile);
    }
    read_neutrons++;

#if defined (USE_MPI)   
  MPI_MASTER(
#endif

    if (verbose==1 && read_neutrons<11) {
      printf("id=%ld\tpdg=2112\tekin=%g MeV\tx=%g cm\ty=%g cm\tz=%g cm\tux=%g\tuy=%g\tuz=%g\tt=%g ms\tweight=%g\tpolx=%g\tpoly=%g\tpolz=%g\n",
	     read_neutrons, particle->ekin, particle->position[0], particle->position[1], particle->position[2],
	     particle->direction[0], particle->direction[1], particle->direction[2], particle->time, particle->weight,
	     particle->polarisation[0], particle->polarisation[1], particle->polarisation[2]);
    }

#if defined (USE_MPI)   
	    );
#endif    

    /*positions are in cm*/
    x=particle->position[0]/100;
    y=particle->position[1]/100;
    z=particle->position[2]/100;

    if(polarisationuse){
        sx=particle->polarisation[0];
        sy=particle->polarisation[1];
        sz=particle->polarisation[2];
    }

    nrm = particle->ekin *1e9/VS2E;
    nrm = sqrt(nrm);
    vx=particle->direction[0]*nrm;
    vy=particle->direction[1]*nrm;
    vz=particle->direction[2]*nrm;
    /*time in ms:*/
    t=particle->time*1e-3;
    /*weight in unspecified units:*/
    p=particle->weight;
    
#if defined USE_MPI
      /* We always repeat by the number of nodes in an MPI run */
      p /= mpi_node_count;
#endif

    SCATTER;
%}

SAVE
%{
    mcpl_close_file(inputfile);  
%}

FINALLY
%{
    long long ncount;

    ncount=mcget_ncount();
    if (ncount != read_neutrons){
        fprintf(stderr,"Warning (%s): You requested %ld neutrons from a file which contains %ld.\n"
                "Please examine the recorded intensities carefully.\n",NAME_CURRENT_COMP,ncount,nparticles);
    }


%}

MCDISPLAY
%{
    multiline(5, 0.2,0.2,0.0, -0.2,0.2,0.0, -0.2,-0.2,0.0, 0.2,-0.2,0.0, 0.2,0.2,0.0);
    /*M*/
    multiline(5,-0.085,-0.085,0.0, -0.085,0.085,0.0, -0.045,-0.085,0.0, -0.005,0.085,0.0, -0.005,-0.085,0.0);
    /*I*/
    line(0.045,-0.085,0, 0.045, 0.085,0);    
    line(0.005, 0.085,0, 0.085, 0.085,0);    
    line(0.005,-0.085,0, 0.085,-0.085,0);    
%}

END
